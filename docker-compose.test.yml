# Docker Compose test environment for database helper scripts

services:
  # Primary PostgreSQL instance for main testing
  postgres-primary:
    image: postgres:15
    container_name: db-test-primary
    environment:
      POSTGRES_DB: testdb
      POSTGRES_USER: testuser
      POSTGRES_PASSWORD: testpass
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=C"
    ports:
      - "15432:5432"
    volumes:
      - postgres_primary_data:/var/lib/postgresql/data
      - ./tests/fixtures:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U testuser -d testdb"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - db-test-network

  # Secondary PostgreSQL instance for cross-server testing
  postgres-secondary:
    image: postgres:15
    container_name: db-test-secondary
    environment:
      POSTGRES_DB: testdb2
      POSTGRES_USER: testuser2
      POSTGRES_PASSWORD: testpass2
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=C"
    ports:
      - "15433:5432"
    volumes:
      - postgres_secondary_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U testuser2 -d testdb2"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - db-test-network

  # Test runner container with bats and all dependencies
  test-runner:
    build:
      context: .
      dockerfile: Dockerfile.test
    container_name: db-test-runner
    environment:
      # Primary database configuration (matching test_helpers.bash)
      TEST_HOST_PRIMARY: postgres-primary
      TEST_PORT_PRIMARY: 5432
      TEST_USER_PRIMARY: testuser
      TEST_PASS_PRIMARY: testpass
      TEST_DB_PRIMARY: testdb

      # Secondary database configuration (matching test_helpers.bash)
      TEST_HOST_SECONDARY: postgres-secondary
      TEST_PORT_SECONDARY: 5432
      TEST_USER_SECONDARY: testuser2
      TEST_PASS_SECONDARY: testpass2
      TEST_DB_SECONDARY: testdb2

      # Standard PostgreSQL environment variables for compatibility
      PGPASSWORD: testpass
    volumes:
      - .:/workspace
      - /var/run/docker.sock:/var/run/docker.sock
    working_dir: /workspace
    depends_on:
      postgres-primary:
        condition: service_healthy
      postgres-secondary:
        condition: service_healthy
    networks:
      - db-test-network
    command: tail -f /dev/null  # Keep container running

volumes:
  postgres_primary_data:
  postgres_secondary_data:

networks:
  db-test-network:
    driver: bridge
