version: '3'

vars:
  LOCAL_BIN: "{{.HOME}}/.local/bin"
  SCRIPTS:
    - db-backup-restore
    - db-copy
    - db-user-manager
  GITHUB_REPO: "hongkongkiwi/db-helper-scripts"

tasks:
  default:
    desc: Show available tasks
    cmds:
      - task --list

  # Development tasks
  dev:setup:
    desc: Setup development environment
    cmds:
      - chmod +x db-backup-restore db-copy db-user-manager run-tests
      - mkdir -p ~/.local/bin
      - task: dev:lint:install
    status:
      - test -f ~/.git/hooks/pre-commit

  dev:lint:
    desc: Run all linting tools via pre-commit
    cmds:
      - pre-commit run --all-files || echo "pre-commit not installed - run 'task dev:lint:install' first"

  dev:lint:install:
    desc: Install pre-commit hooks and dependencies
    cmds:
      - pip install -r requirements.txt
      - pre-commit install
      - pre-commit install --hook-type commit-msg
      - echo "Pre-commit hooks and dependencies installed successfully"

  dev:lint:shellcheck:
    desc: Run shellcheck only (legacy)
    cmds:
      - shellcheck db-backup-restore db-copy db-user-manager run-tests tests/helpers/test_helpers.bash
    silent: true

  dev:test:
    desc: Run all tests
    cmds:
      - ./run-tests

  dev:test:fast:
    desc: Run fast tests (cross-platform only)
    cmds:
      - ./run-tests --test cross_platform

  dev:test:docker:
    desc: Run tests in Docker
    cmds:
      - ./run-tests --docker

  dev:clean:
    desc: Clean up test artifacts and Docker containers
    cmds:
      - ./run-tests --cleanup
      - docker system prune -f
      - rm -rf tests/temp_*

  # Installation tasks
  install:
    desc: Install scripts to ~/.local/bin
    cmds:
      - mkdir -p {{.LOCAL_BIN}}
      - |
        for script in {{.SCRIPTS | join " "}}; do
          echo "Installing $script to {{.LOCAL_BIN}}/"
          cp "$script" "{{.LOCAL_BIN}}/"
          chmod +x "{{.LOCAL_BIN}}/$script"
        done
      - echo "Scripts installed to {{.LOCAL_BIN}}"
      - echo "Make sure {{.LOCAL_BIN}} is in your PATH"

  uninstall:
    desc: Remove scripts from ~/.local/bin
    cmds:
      - |
        for script in {{.SCRIPTS | join " "}}; do
          if [ -f "{{.LOCAL_BIN}}/$script" ]; then
            echo "Removing {{.LOCAL_BIN}}/$script"
            rm "{{.LOCAL_BIN}}/$script"
          fi
        done
      - echo "Scripts removed from {{.LOCAL_BIN}}"

  update:
    desc: Update scripts from latest GitHub release
    cmds:
      - task: update:check
      - task: update:download
      - task: update:install

  update:check:
    desc: Check for updates
    cmds:
      - |
        echo "Checking for updates from {{.GITHUB_REPO}}..."
        latest=$(curl -s "https://api.github.com/repos/{{.GITHUB_REPO}}/releases/latest" | \
          grep '"tag_name":' | sed -E 's/.*"([^"]+)".*/\1/')
        echo "Latest release: $latest"
        # Store in temp file for next task
        echo "$latest" > /tmp/db-scripts-latest-version

  update:download:
    desc: Download latest release
    cmds:
      - |
        latest=$(cat /tmp/db-scripts-latest-version 2>/dev/null || echo "latest")
        echo "Downloading release $latest..."
        curl -L "https://github.com/{{.GITHUB_REPO}}/archive/refs/tags/$latest.tar.gz" -o /tmp/db-scripts-update.tar.gz
        mkdir -p /tmp/db-scripts-update
        tar -xzf /tmp/db-scripts-update.tar.gz -C /tmp/db-scripts-update --strip-components=1

  update:install:
    desc: Install downloaded update
    cmds:
      - |
        if [ -d "/tmp/db-scripts-update" ]; then
          for script in {{.SCRIPTS | join " "}}; do
            if [ -f "/tmp/db-scripts-update/$script" ]; then
              echo "Updating $script..."
              cp "/tmp/db-scripts-update/$script" .
              chmod +x "$script"
              # If installed in local bin, update there too
              if [ -f "{{.LOCAL_BIN}}/$script" ]; then
                cp "$script" "{{.LOCAL_BIN}}/"
                chmod +x "{{.LOCAL_BIN}}/$script"
              fi
            fi
          done
          echo "Update complete!"
          rm -rf /tmp/db-scripts-update /tmp/db-scripts-update.tar.gz /tmp/db-scripts-latest-version
        else
          echo "No update files found. Run 'task update:download' first."
          exit 1
        fi

  # Release tasks
  release:check:
    desc: Check if ready for release (linting only - tests skipped for speed)
    cmds:
      - task: dev:lint
      - |
        if git status --porcelain | grep -q .; then
          echo "Working directory not clean"
          exit 1
        else
          echo "Working directory clean"
        fi

  release:version:
    desc: Show current versions in scripts
    cmds:
      - grep -n "version" db-backup-restore db-copy db-user-manager | grep -E "v[0-9]+\.[0-9]+\.[0-9]+"

  release:create:
    desc: Create a new release (requires VERSION variable)
    preconditions:
      - sh: test -n "{{.VERSION}}"
        msg: "Usage: task release:create VERSION=1.2.3"
    cmds:
      - task: release:check
      - |
        echo "Creating release v{{.VERSION}}..."
        echo "This will trigger the GitHub Actions workflow."
        echo "Make sure you have committed all changes."
        read -p "Continue? (y/N): " confirm
        if [[ "$confirm" != "y" && "$confirm" != "Y" ]]; then
          echo "Release cancelled"
          exit 1
        fi
      - git tag -a "v{{.VERSION}}" -m "Release v{{.VERSION}}"
      - git push origin "v{{.VERSION}}"
      - echo "Release tag v{{.VERSION}} pushed. Check GitHub Actions for release creation."

  release:manual:
    desc: Instructions for manual release via GitHub UI
    cmds:
      - |
        echo "To create a manual release:"
        echo "1. Go to https://github.com/{{.GITHUB_REPO}}/actions/workflows/manual-release.yml"
        echo "2. Click 'Run workflow'"
        echo "3. Enter the version number (e.g., 2.1.0)"
        echo "4. Choose release type (release or prerelease)"
        echo "5. Optionally add custom release notes"
        echo "6. Click 'Run workflow'"
        echo ""
        echo "Current script versions:"
        task release:version

  release:current:
    desc: Get current version from scripts
    cmds:
      - |
        CURRENT_VERSION=$(grep 'SCRIPT_VERSION=' db-backup-restore | head -1 | sed 's/.*"\(.*\)".*/\1/')
        echo "$CURRENT_VERSION"
    silent: true

  release:patch:
    desc: Create a patch release (auto-increment from latest git tag)
    deps:
      - release:check
    cmds:
      - ./release patch

  release:minor:
    desc: Create a minor release (auto-increment from latest git tag)
    deps:
      - release:check
    cmds:
      - ./release minor

  release:major:
    desc: Create a major release (auto-increment from latest git tag)
    deps:
      - release:check
    cmds:
      - ./release major

  release:info:
    desc: Show current version and release options
    cmds:
      - |
        # Use the release script to get current version (considers git tags)
        echo "üè∑Ô∏è  Version Information:"
        ./release --current
        echo ""

        # Get effective current version for next version calculations
        CURRENT_VERSION=$(./release --current | grep "Current version:" | cut -d' ' -f3)
        echo "üìã Release Options:"
        echo "  task release:patch   ‚Üí v$(echo $CURRENT_VERSION | awk -F. '{print $1"."$2"."($3+1)}')"
        echo "  task release:minor   ‚Üí v$(echo $CURRENT_VERSION | awk -F. '{print $1"."($2+1)".0"}')"
        echo "  task release:major   ‚Üí v$(echo $CURRENT_VERSION | awk -F. '{print ($1+1)".0.0"}')"
        echo ""
        echo "üîÑ Manual Options:"
        echo "  ./release <version>  ‚Üí Custom version (e.g., ./release 3.1.4)"
        echo "  ./release --help     ‚Üí See all options"
        echo ""
        echo "üè∑Ô∏è  Recent Git Tags:"
        git tag --list --sort=-version:refname | grep -E '^v[0-9]+\.[0-9]+\.[0-9]+$' | head -5 || echo "  (no version tags found)"
        echo ""
        echo "‚ÑπÔ∏è  Note: Versions are auto-incremented from the latest git tag,"
        echo "   not from script versions. This handles existing tags intelligently."

  # Dependabot tasks
  deps:status:
    desc: Check Dependabot status and recent PRs
    cmds:
      - |
        echo "üì¶ Dependabot Status for {{.GITHUB_REPO}}"
        echo "================================="
        echo ""
        echo "üîç Recent Dependabot PRs:"
        gh pr list --author "dependabot[bot]" --limit 5 \
          --json number,title,state,updatedAt \
          --template '{{range .}}PR #{{.number}}: {{.title}} ({{.state}}) - {{.updatedAt}}{{"\n"}}{{end}}' || \
          echo "GitHub CLI not available or not authenticated"
        echo ""
        echo "üìã Dependabot Configuration:"
        echo "  - GitHub Actions: Weekly (Mondays)"
        echo "  - Docker: Weekly (Tuesdays)"
        echo "  - Python/Pre-commit: Weekly (Wednesdays)"
        echo ""
        echo "ü§ñ Auto-merge enabled for patch/minor updates"
        echo "‚ö†Ô∏è  Major updates require manual review"

  deps:check:
    desc: Check for dependency updates manually
    cmds:
      - |
        echo "üîç Checking for dependency updates..."
        echo ""
        echo "GitHub Actions:"
        grep -r "uses:" .github/workflows/ | grep -v "#" | sort | uniq
        echo ""
        echo "Docker Images:"
        grep -r "FROM" Dockerfile* docker-compose*.yml | grep -v "#" | sort | uniq
        echo ""
        echo "Python Dependencies:"
        cat requirements.txt | grep -v "#" | grep -v "^$"

  deps:security:
    desc: Check for security vulnerabilities in dependencies
    cmds:
      - |
        echo "üîí Security Check"
        echo "================="
        echo ""
        echo "Checking GitHub Advisory Database..."
        gh api repos/{{.GITHUB_REPO}}/vulnerability-alerts || echo "No security alerts or GitHub CLI not available"
        echo ""
        echo "üí° Tip: Enable Dependabot security updates in repository settings"

  # Documentation tasks
  docs:readme:
    desc: Validate README.md has current script versions
    cmds:
      - |
        echo "Checking README.md for current versions..."
        for script in {{.SCRIPTS | join " "}}; do
          version=$(grep -E "v[0-9]+\.[0-9]+\.[0-9]+" "$script" | head -1 | grep -oE "v[0-9]+\.[0-9]+\.[0-9]+")
          if grep -q "$script.*$version" README.md; then
            echo "‚úì $script $version found in README.md"
          else
            echo "‚úó $script $version NOT found in README.md"
          fi
        done

  # Performance and benchmarking
  benchmark:
    desc: Run performance benchmarks
    cmds:
      - echo "Running basic performance tests..."
      - time ./db-backup-restore help >/dev/null
      - time ./db-copy help >/dev/null
      - time ./db-user-manager help >/dev/null
      - echo "Help command benchmarks complete"

  # Utility tasks
  check:deps:
    desc: Check system dependencies
    cmds:
      - |
        echo "Checking dependencies..."
        deps="psql pg_dump pg_restore createdb dropdb gzip"
        for dep in $deps; do
          if command -v "$dep" >/dev/null 2>&1; then
            echo "‚úì $dep found"
          else
            echo "‚úó $dep missing"
          fi
        done

  check:platform:
    desc: Check platform compatibility
    cmds:
      - |
        echo "Platform: $(uname -s)"
        echo "Shell: $SHELL"
        echo "Bash version: $BASH_VERSION"
        if command -v gstat >/dev/null 2>&1; then
          echo "‚úì GNU stat available (gstat)"
        elif stat --version >/dev/null 2>&1; then
          echo "‚úì GNU stat available"
        else
          echo "‚úì BSD stat available"
        fi
