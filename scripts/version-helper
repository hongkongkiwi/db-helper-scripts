#!/bin/bash
# Version Helper Script for db-helper-scripts
# Provides quick version information and next version calculations

set -euo pipefail

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(dirname "$SCRIPT_DIR")"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

usage() {
    cat << EOF
Version Helper for db-helper-scripts

Usage: $0 [command]

Commands:
    current     Show current version
    next        Show next possible versions
    patch       Show next patch version
    minor       Show next minor version
    major       Show next major version
    info        Show version info and release options
    help        Show this help message

Examples:
    $0 current          # Shows: 2.0.0
    $0 next             # Shows all next versions
    $0 patch            # Shows: 2.0.1
EOF
}

get_current_version() {
    if [[ -f "$PROJECT_ROOT/db-backup-restore" ]]; then
        grep 'SCRIPT_VERSION=' "$PROJECT_ROOT/db-backup-restore" | head -1 | sed 's/.*"\(.*\)".*/\1/'
    else
        echo "Error: db-backup-restore script not found" >&2
        exit 1
    fi
}

calculate_next_versions() {
    local current_version="$1"
    local major minor patch

    IFS='.' read -r major minor patch <<< "$current_version"

    echo "patch:$major.$minor.$((patch + 1))"
    echo "minor:$major.$((minor + 1)).0"
    echo "major:$((major + 1)).0.0"
}

show_info() {
    local current_version
    current_version=$(get_current_version)

    echo -e "${BLUE}🏷️  Current Version:${NC} v$current_version"
    echo ""
    echo -e "${GREEN}📋 Next Versions:${NC}"

    local versions
    versions=$(calculate_next_versions "$current_version")

    while IFS=: read -r type version; do
        case $type in
            patch) echo -e "  ${GREEN}Patch:${NC} v$version (bug fixes)" ;;
            minor) echo -e "  ${YELLOW}Minor:${NC} v$version (new features)" ;;
            major) echo -e "  ${RED}Major:${NC} v$version (breaking changes)" ;;
        esac
    done <<< "$versions"

    echo ""
    echo -e "${BLUE}🚀 Quick Release Commands:${NC}"
    echo "  task release:patch"
    echo "  task release:minor"
    echo "  task release:major"
}

main() {
    local command="${1:-help}"

    case "$command" in
        current)
            get_current_version
            ;;
        next)
            local current_version
            current_version=$(get_current_version)
            calculate_next_versions "$current_version" | while IFS=: read -r type version; do
                echo "v$version ($type)"
            done
            ;;
        patch)
            local current_version
            current_version=$(get_current_version)
            calculate_next_versions "$current_version" | grep "^patch:" | cut -d: -f2
            ;;
        minor)
            local current_version
            current_version=$(get_current_version)
            calculate_next_versions "$current_version" | grep "^minor:" | cut -d: -f2
            ;;
        major)
            local current_version
            current_version=$(get_current_version)
            calculate_next_versions "$current_version" | grep "^major:" | cut -d: -f2
            ;;
        info)
            show_info
            ;;
        help|--help|-h)
            usage
            ;;
        *)
            echo -e "${RED}Error:${NC} Unknown command: $command" >&2
            echo ""
            usage
            exit 1
            ;;
    esac
}

main "$@"
