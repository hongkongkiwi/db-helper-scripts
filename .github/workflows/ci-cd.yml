name: CI/CD Pipeline

"on":
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, develop ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Lint and validate shell scripts
  lint:
    name: Lint Scripts
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: false

      - name: Install ShellCheck
        run: |
          sudo apt-get update
          sudo apt-get install -y shellcheck

      - name: Run ShellCheck
        run: |
          shellcheck db-backup-restore db-copy db-user-manager run-tests tests/helpers/test_helpers.bash

      - name: Check script permissions
        run: |
          for script in db-backup-restore db-copy db-user-manager run-tests; do
            if [ ! -x "$script" ]; then
              echo "Error: $script is not executable"
              exit 1
            fi
          done

  # Run comprehensive tests
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: lint
    strategy:
      matrix:
        test-type: [cross_platform, comprehensive]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: false

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Install Task
        uses: arduino/setup-task@v1
        with:
          version: 3.x

      - name: Install bats
        run: |
          sudo apt-get update
          sudo apt-get install -y bats

      - name: Run tests in Docker
        run: |
          if [ "${{ matrix.test-type }}" = "cross_platform" ]; then
            ./run-tests --docker --test cross_platform
          else
            ./run-tests --docker
          fi

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-${{ matrix.test-type }}
          path: |
            tests/reports/
            tests/logs/

  # Security scan
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: lint
    permissions:
      contents: read
      security-events: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          # Avoid submodule issues by not recursing into submodules
          submodules: false

      - name: Run Bandit security scan
        uses: PyCQA/bandit-action@v1
        with:
          targets: .
          exclude: "tests/bats-helpers"

      - name: Check for hardcoded secrets
        run: |
          # Check for potential hardcoded passwords, tokens, etc.
          if grep -r -E "(password|token|secret|key)\s*=\s*['\"][^'\"]*['\"]" . \
              --include="*.sh" --include="*.bash" --exclude-dir=tests; then
            echo "Warning: Potential hardcoded secrets found"
            exit 1
          fi

  # Create release when tag is pushed
  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [lint, security]
    if: startsWith(github.ref, 'refs/tags/v')
    permissions:
      contents: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: false

      - name: Get tag name
        id: tag
        run: echo "tag=${GITHUB_REF#refs/tags/}" >> "$GITHUB_OUTPUT"

      - name: Validate tag format
        run: |
          if [[ ! "${{ steps.tag.outputs.tag }}" =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "Error: Tag must be in format v1.2.3"
            exit 1
          fi

      - name: Extract version numbers
        id: version
        run: |
          TAG="${{ steps.tag.outputs.tag }}"
          VERSION=${TAG#v}
          {
            echo "version=$VERSION"
            echo "major=$(echo "$VERSION" | cut -d. -f1)"
            echo "minor=$(echo "$VERSION" | cut -d. -f2)"
            echo "patch=$(echo "$VERSION" | cut -d. -f3)"
          } >> "$GITHUB_OUTPUT"

      - name: Update script versions
        run: |
          VERSION="${{ steps.version.outputs.version }}"

          # Update version in each script
          sed -i "s/SCRIPT_VERSION=\"[^\"]*\"/SCRIPT_VERSION=\"$VERSION\"/" db-backup-restore || \
            echo "No SCRIPT_VERSION found in db-backup-restore"
          sed -i "s/SCRIPT_VERSION=\"[^\"]*\"/SCRIPT_VERSION=\"$VERSION\"/" db-copy || \
            echo "No SCRIPT_VERSION found in db-copy"
          sed -i "s/SCRIPT_VERSION=\"[^\"]*\"/SCRIPT_VERSION=\"$VERSION\"/" db-user-manager || \
            echo "No SCRIPT_VERSION found in db-user-manager"
          sed -i "s/# Version: [0-9.]*/# Version: $VERSION/" db-user-manager || \
            echo "No version comment found in db-user-manager"

          # Update Dockerfile version label
          sed -i "s/LABEL version=\"[^\"]*\"/LABEL version=\"$VERSION\"/" Dockerfile || \
            echo "No version label found in Dockerfile"

      - name: Generate changelog
        id: changelog
        run: |
          # Generate changelog from git commits since last tag
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD~1 2>/dev/null || echo "")

          if [ -n "$PREVIOUS_TAG" ]; then
            {
              echo "## Changes since $PREVIOUS_TAG"
              echo ""
              git log --pretty=format:"- %s (%h)" "${PREVIOUS_TAG}..HEAD"
            } > CHANGELOG.md
          else
            {
              echo "## Initial Release"
              echo ""
              echo "- Initial release of db-helper-scripts"
            } > CHANGELOG.md
          fi

          {
            echo ""
            echo "## Script Versions"
            echo "- db-backup-restore: v${{ steps.version.outputs.version }}"
            echo "- db-copy: v${{ steps.version.outputs.version }}"
            echo "- db-user-manager: v${{ steps.version.outputs.version }}"
          } >> CHANGELOG.md

      - name: Create release archive
        run: |
          mkdir -p release

          # Copy main scripts
          cp db-backup-restore db-copy db-user-manager release/
          cp run-tests release/
          cp Taskfile.yml release/
          cp README.md release/
          cp Dockerfile release/
          cp .dockerignore release/
          cp docker-compose.yml release/

          # Copy supporting files
          cp -r tests release/

          # Create installation script
          cat > release/install.sh << 'EOF'
          #!/bin/bash
          set -e

          INSTALL_DIR="${HOME}/.local/bin"
          SCRIPTS="db-backup-restore db-copy db-user-manager"

          echo "Installing db-helper-scripts to $INSTALL_DIR"
          mkdir -p "$INSTALL_DIR"

          for script in $SCRIPTS; do
            if [ -f "$script" ]; then
              echo "Installing $script"
              cp "$script" "$INSTALL_DIR/"
              chmod +x "$INSTALL_DIR/$script"
            else
              echo "Warning: $script not found"
            fi
          done

          echo "Installation complete!"
          echo "Make sure $INSTALL_DIR is in your PATH"

          # Add to PATH if not already there
          if ! echo "$PATH" | grep -q "$INSTALL_DIR"; then
            echo "Add this line to your shell profile (.bashrc, .zshrc, etc.):"
            echo "export PATH=\"\$PATH:$INSTALL_DIR\""
          fi
          EOF

          chmod +x release/install.sh

          # Create tarball
          tar -czf db-helper-scripts-${{ steps.version.outputs.version }}.tar.gz -C release .

          # Create zip file
          cd release && zip -r ../db-helper-scripts-${{ steps.version.outputs.version }}.zip . && cd ..

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.tag.outputs.tag }}
          name: Release ${{ steps.tag.outputs.tag }}
          body_path: CHANGELOG.md
          draft: false
          prerelease: false
          files: |
            db-helper-scripts-${{ steps.version.outputs.version }}.tar.gz
            db-helper-scripts-${{ steps.version.outputs.version }}.zip
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Update README versions
        run: |
          VERSION="${{ steps.version.outputs.version }}"

          # Update version references in README
          sed -i "s/db-backup-restore\*\*: v[0-9.]*/*db-backup-restore**: v$VERSION/" README.md
          sed -i "s/db-copy\*\*: v[0-9.]*/*db-copy**: v$VERSION/" README.md
          sed -i "s/db-user-manager\*\*: v[0-9.]*/*db-user-manager**: v$VERSION/" README.md

      - name: Commit version updates
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add db-backup-restore db-copy db-user-manager README.md
          git commit -m "Update versions to ${{ steps.version.outputs.version }}" || exit 0
          git push origin HEAD:main || exit 0

  # Build and push Docker image for testing
  docker:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: [lint, test]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: false

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.test
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
